'''Логические выражения и операторы Phyton'''

'''Boolean'''
# неизменяемый тип данных
True/False

print(bool(0)) #False
print(bool(2)) #True
print(bool(False)) #False
print(bool('False')) #True
print(bool(' ')) #True
print(bool('')) #False
print(bool(-234)) #True



'''Логические выражения -> выражения, возвращающие Boolean Type'''
#Логические операторы - используются для создания логических вырожений

# == -> сравнение
5 == 5 #True
4 == 6 #False
'5' == 5 #False

# != -> не равно
5 != 5 #False
6 != 4 #True

# >/< (больше/меньше)
5 > 2 #True
5 < 2 #False
2 > 5 #False
2 < 5 #True

# >=/<= (больше или равно/меньше или равно)
6 >= 3 #True
6 >= 6 #True
6 >= 7 #False
4 <= 3 #False
4 <= 5 #Trye
4 <= 4 #True



'''and or not'''
# and -> логическое 'и', используется для объединения логических выражений
# or -> логическое 'или', используется для объединения логических выражений
# not -> лоическое 'отрицание'

a = 5
b = 6

# and #

# True     True
a == 5 and b == 6 #True
# True     False
a == 5 and b == 7 #False
# False    False
a == 7 and b == 7 #False

# если все части выражения возвращают True, то все выражения возвращают True
# если хоть одна часть вырожения возвращает False, то все выражение возвращает False

# or #

# True    True
a == 5 or b == 6 #True
# True    False
a == 5 or b == 7 #True
# False   False
a == 7 or b == 7 #False

# если все части выражения или хоть одна его часть возвращают True, то все выражения возвращают True
# если все части вырожения возвращает False, то все выражение возвращает False

# not #

print(not True) #False
print(not False) #True 
not a == 5 #False
not b == 7 #True



'''Операторы идентификации'''
# 1. in -> проверяет наличие элемента 
# 2. сравнения:
#    == -> по значению
#    is -> по ячейки памяти
# 3. is not -> отрицательное, по ячейки памяти



'''========= None Type ========='''
# неизменяемый тип данных с одним значением None. Используется для обозначения пустых значений

bool(None) #False
bool('None') #True

a = None
print(a == None) #True



'''========= Условные операторы ========='''
# нужны для того, чтобы при разных вводах данных код выполнялся по разному

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

if 'условие':
    'тело'
# тело будет работать если условие True (верно)


if 'условие 1':
    'тело 1'
else:
    'тело 2'
# тело 1 будет работать если условие 1 верно, тело 2 - если условие 1 не верно

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

if 'условие 1':
    'тело 1'
    # тело 1 бедет работать только если условие 1 верно
elif 'условие 2':
      'тело 2'
     # тело 2 бедет работать только если условие 1 не верно, а условие 2 верно
elif 'условие 3':
      'тело 3'
     # тело 3 бедет работать только если условие 1 и 2 не верно, а условие 3 верно
else:
    'тело 4' 
     # тело 4 бедет работать во всех остальных случаях (если условия 1, 2, 3 - не верны)
# в одной конструкции: 1 if, сколько угодно elif, 1 else.


# Пример

a = int(input('Введиту ваш возраст:'))
if a >= 18:
    print('ok')
else:
    print('go away')
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
your_numb = int(input('your numb:'))
if your_numb == 0:
    print('zero')
elif your_numb > 0:
    print('ok')
else:
    print('no')



'''Тернарные операторы'''
# условие в одну строку

# синтаксис: тело 1 if условие else тело 2
num = 0
result = 'hello' if num == 0 else 'world'
print(result)



'''========= Маржовый операторы ========='''
# позволяет нам как присваевать значение, так и возвращать его в одном выражении
print(hello := 'hello')
print(hello = 'hello') #TypeError



'''Задачи'''

your_numb = int(input('your numb:'))
if your_numb % 2 == 0:
    print('четное')
else:
    print('нечетное')

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

a = int(input())
if a % 15 == 0:
    print('FizzBuzz')
elif a % 3 == 0:
    print('Fizz')
elif a % 5 == 0:
    print('Buzz')
else:
    print(a)